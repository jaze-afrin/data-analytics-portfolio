33. Create a stored procedure that displays any message on the screen without using any tables/views.QUERY:create procedure raise_notice (s text) language plpgsql as $$begin     raise notice '%', s;end;$$;call raise_notice('Happy Coding');34. In healthy people, monocytes make up about 1%-9% of total white blood cells. Calculate avg monocyte percentages among each age group.QUERY:select agecat , round((avg(monocyte_percentage)*100),2)  as average_monocyte_percentagefrom (select  agecat , (monocyte_count::numeric /nullif(count(white_blood_cell),0)) as monocyte_percentage 	from public.demography d join public.labs l on d.inpatient_number = l.inpatient_number group by agecat , monocyte_count     ) group by agecat	order by agecat	;35. Create a table that stores any Patient Demographics of your choice as the parent table. 	Create a child table that contains systolic_blood_pressure,diastolic_blood_pressure per patient and inherits all columns from the parent tableQUERY:create table patient_history (	inpatient_number bigint,	gender           text,	agecat           text);insert into patient_history (inpatient_number, gender, agecat)values  (827040, 'Female', '69-79'),        (857781, 'Female', '69-79'),        (743087,  'Male',  '69-79'),         (866418,  'Male',  '59-69'),        (775928, 'Female', '69-79'),        (810128,  'Male',  '69-79'),        (823318,  'Male',  '79-89'),        (844094, 'Female', '79-89'),        (787530, 'Female', '69-79');create table patient_labs ( 	systolic_blood_pressure bigint,	diastolic_blood_pressure bigint) inherits (patient_history);insert into patient_labs (systolic_blood_pressure, diastolic_blood_pressure)values   (102 , 64),             (150 , 70),	             (102 , 67),             (110 , 74),             (134 , 62),             (96  , 64),             (129 , 54),             (112 , 60),             (166 , 85);36. Write a select statement with no table or view attached to it QUERY:select generate_series(1,10)(comment : kept 2 answers not sure which one  is needed)SELECT 'Hello world'37. Create a re-usable function to calculate the percentage of patients for any group.Use this function to calculate % of patients in each admission ward."QUERY:CREATE OR REPLACE FUNCTION patients_percentage_calculation	 (group_column text)	 returns table(    	group_value TEXT,    patient_count BIGINT,    percentage NUMERIC)	AS $$    Begin 	RETURN QUERY EXECUTE format(	'Select %I AS group_value, COUNT(*) AS patient_count, ROUND((COUNT(*)*100/	(SELECT COUNT(*)  FROM hospitalization_discharge)),2) AS percentage	FROM hospitalization_discharge	GROUP BY %I',	group_column, group_column);end;$$ LANGUAGE plpgsql;  --run hereSELECT * FROM patients_percentage_calculation('admission_ward');38. Write a query that shows if CCI score is an even or odd number for any 10 patients	QUERY:SELECT cci_score,  inpatient_number,CASE  WHEN (cci_score::int % 2) = 0 THEN 'Even' ELSE 'odd'END AS "Score_Odd_Even"FROM patienthistorywhere inpatient_number in (857781,748109,814592,828763,738813,729332,815585,780166,743467,764380);--39. Using windows functions show the number of hospitalizations in the previous month and the next monthQUERY:with hospitalizations as (	select  date_trunc('month',admission_date) as month,count(*) as hospitalization_count	from public.hospitalization_discharge	group by month)select 	month,	hospitalization_count,	lag(hospitalization_count)over (order by month)as previous_month,	lead(hospitalization_count)over (order by month)as next_month	from hospitalizationsorder by month ;40. Write a function to get comma-separated values of patient details based on patient number entered by the user. 	(Use a maximum of 6 columns from different tables)QUERY:create function patient_details_csv(patient_number bigint)	returns text as $$declare 	patient_details text;begin	SELECT string_agg( d.inpatient_number ||':' || gender ||':age ' || age ||':medication ' || drug_name || ':' || outcome_during_hospitalization ||':Ward ' || 	admission_ward, ',')into patient_details     FROM public.demography d join public.patient_precriptions using (inpatient_number) join  public.hospitalization_discharge    using (inpatient_number) where d.inpatient_number = patient_number;    return  patient_details ;END;$$ language plpgsql;select patient_details_csv(743087);   41. Which patients were on more than 15 prescribed drugs? What was their age and outcome?    how the results without using a subqueryQUERY:SELECT * FROM demography	ALTER TABLE demographyADD COLUMN age int;UPDATE demographySET age = CASE	WHEN agecat = '21-29' THENFLOOR(21 +RANDOM()* 9)    WHEN agecat = '29-39' THENFLOOR(29 +RANDOM()* 11)    WHEN agecat = '39-49' THENFLOOR(39 +RANDOM()* 11)   WHEN agecat = '49-59' THENFLOOR(49 +RANDOM()* 11)   WHEN agecat = '59-69' THENFLOOR(59 +RANDOM()* 11)   WHEN agecat = '69-79' THENFLOOR(69 +RANDOM()* 11)    WHEN agecat = '79-89' THENFLOOR(79 +RANDOM()* 11)     WHEN agecat = '89-110' THENFLOOR(89 +RANDOM()* 22)    ELSE ageEND;with patient_drugs as (select p.inpatient_number, count(drug_name) as drugs , age, outcome_during_hospitalization from public.patient_precriptions p join public.demography d on p.inpatient_number = d.inpatient_numberjoin public.hospitalization_discharge h	on p.inpatient_number=h.inpatient_numbergroup by p.inpatient_number , age , outcome_during_hospitalizationhaving count(drug_name) > 15 )	select inpatient_number, age , outcome_during_hospitalization , drugs from patient_drugs42. Write a PLSQL block to return the patient ID and gender from demography for a patient if the ID exists and raise an exception if the patient id is not found. 	Do this without writing or storing a function. Patient ID can be hard-coded for the block	QUERY:do $$declare	p_id integer := 743087;	p_gender varchar(20);	p_exists boolean;begin	select exists(select inpatient_number from  public.demography where inpatient_number = p_id ) into p_exists;    select gender into p_gender from public.demography where inpatient_number = p_id ;	if p_exists then	 raise notice 'id:% ', p_id || ',' || ' gender:'  || p_gender ;	else	 raise notice 'patient id % does not exists in the table.' , p_id;	END IF;END $$;	43. Display any 10 random patients along with their type of heart failureQUERY:SELECT inpatient_number, type_of_heart_failure FROM  public.cardiaccomplicationsORDER BY RANDOM() LIMIT 10;44. select drug_name from public.patient_precriptionQUERY:SELECT drug_name, length(drug_name) AS "Length of unique drug Name" FROM public.patient_precriptionsWHERE length(drug_name)>20;45. Rank patients using CCI Score as your base. Use a windows function to rank them in descending order. 	With the highest no. of comorbidities ranked 1.QUERY:SELECT    inpatient_number, cci_score,    RANK() OVER (         ORDER BY cci_score desc    ) FROM 	public.patienthistorywhere cci_score is not null;	46. What ratio of patients who are responsive to sound vs pain?QUERY:WITH CTE AS	(	SELECT DISTINCT (consciousness), COUNT(*) 	as patients_count FROM responsivenes    WHERE consciousness IN ('ResponsiveToSound','ResponsiveToPain')	group by responsivenes.consciousness	)SELECT 	(SELECT patients_count FROM CTE WHERE consciousness = 'ResponsiveToSound') As Responsive_to_sound,	(SELECT patients_count FROM CTE WHERE consciousness = 'ResponsiveToPain') AS Responsive_to_pain,	(SELECT patients_count FROM CTE WHERE consciousness = 'ResponsiveToSound') || ':' ||	NULLIF((SELECT patients_count FROM CTE WHERE consciousness = 'ResponsiveToPain'), 0 ) AS 	sound_to_pain_ratio;47. Use a windows function to return all admission ways along with occupation--which is related to the highest MAP valueQUERY:SELECT DISTINCT(admission_way), occupation, MAX(map_value)OVER (PARTITION BY admission_way, occupation)as max_mapFROM labs l JOIN hospitalization_discharge h ON h.inpatient_number = l.inpatient_numberJOIN demography d ON d.inpatient_number = l.inpatient_numberORDER BY 148. Display the patients with the highest BMI.QUERY:select inpatient_number, bmi from  public.demographywhere bmi = (select max(bmi) from public.demography);